---
source: tests/langs/mod.rs
expression: inscope_parts
---
- n: 24
  l: "    Example() : value(0) {}\n"
  m: "    ^^^^^^^^^^^^^^^^^^^^^^^  "
- n: 25
  l: "    explicit Example(int val) : value(val) {}\n"
  m: "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  "
- n: 27
  l: "    ~Example() {}\n"
  m: "    ^^^^^^^^^^^^^  "
- n: 29
  l: "    Example operator+(const Example& other) const {\n"
  m: "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
- n: 30
  l: "        return Example(value + other.value);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 31
  l: "    }\n"
  m: "^^^^^  "
- n: 33
  l: "    static int staticMethod() {\n"
  m: "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
- n: 34
  l: "        return 42;\n"
  m: ^^^^^^^^^^^^^^^^^^^^
- n: 35
  l: "    }\n"
  m: "^^^^^  "
- n: 38
  l: "    T add(T a, T b) {\n"
  m: "    ^^^^^^^^^^^^^^^^^^^"
- n: 39
  l: "        return a + b;\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 40
  l: "    }\n"
  m: "^^^^^  "
- n: 54
  l: "    void function() {\n"
  m: "    ^^^^^^^^^^^^^^^^^^^"
- n: 55
  l: "        std::cout << \"Function in namespace\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 56
  l: "    }\n"
  m: "^^^^^  "
- n: 66
  l: "void variadicFunction(Args... args) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 67
  l: "    (std::cout << ... << args) << '\\n';\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 68
  l: "}\n"
  m: "^  "
- n: 72
  l: "std::optional<int> findValue(const std::vector<int>& vec, int value) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 73
  l: "    auto it = std::find(vec.begin(), vec.end(), value);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 74
  l: "    if (it != vec.end()) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 75
  l: "        return *it;\n"
  m: ^^^^^^^^^^^^^^^^^^^^^
- n: 76
  l: "    }\n"
  m: ^^^^^^^
- n: 77
  l: "    return std::nullopt;\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 78
  l: "}\n"
  m: "^  "
- n: 80
  l: "std::variant<int, std::string> getVariant(bool flag) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 81
  l: "    if (flag) {\n"
  m: ^^^^^^^^^^^^^^^^^
- n: 82
  l: "        return 42;\n"
  m: ^^^^^^^^^^^^^^^^^^^^
- n: 83
  l: "    }\n"
  m: ^^^^^^^
- n: 84
  l: "    return \"Hello\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 85
  l: "}\n"
  m: "^  "
- n: 87
  l: "std::tuple<int, double, std::string> createTuple() {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 88
  l: "    return {1, 2.5, \"example\"};\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 89
  l: "}\n"
  m: "^  "
- n: 91
  l: "int main() {\n"
  m: ^^^^^^^^^^^^^^
- n: 92
  l: "    int a = 5;\n"
  m: ^^^^^^^^^^^^^^^^
- n: 93
  l: "    if (a > 0) {\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 94
  l: "        std::cout << \"Positive\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 95
  l: "    } else if (a < 0) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 96
  l: "        std::cout << \"Negative\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 97
  l: "    } else {\n"
  m: ^^^^^^^^^^^^^^
- n: 98
  l: "        std::cout << \"Zero\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 99
  l: "    }\n"
  m: ^^^^^^^
- n: 100
  l: "\n"
  m: ^^
- n: 101
  l: "    for (int i = 0; i < 5; ++i) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 102
  l: "        std::cout << i << \" \";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 103
  l: "    }\n"
  m: ^^^^^^^
- n: 104
  l: "    std::cout << \"\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 105
  l: "\n"
  m: ^^
- n: 106
  l: "    int i = 0;\n"
  m: ^^^^^^^^^^^^^^^^
- n: 107
  l: "    while (i < 5) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^
- n: 108
  l: "        std::cout << i++ << \" \";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 109
  l: "    }\n"
  m: ^^^^^^^
- n: 110
  l: "    std::cout << \"\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 111
  l: "\n"
  m: ^^
- n: 112
  l: "    do {\n"
  m: ^^^^^^^^^^
- n: 113
  l: "        std::cout << i-- << \" \";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 114
  l: "    } while (i > 0);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^
- n: 115
  l: "    std::cout << \"\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 116
  l: "\n"
  m: ^^
- n: 117
  l: "    Example ex1;\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 118
  l: "    Example ex2(10);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^
- n: 119
  l: "    Example ex3 = ex1 + ex2;\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 120
  l: "\n"
  m: ^^
- n: 121
  l: "    Point p{3, 4};\n"
  m: ^^^^^^^^^^^^^^^^^^^^
- n: 122
  l: "\n"
  m: ^^
- n: 123
  l: "    Color color = Color::Red;\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 124
  l: "\n"
  m: ^^
- n: 125
  l: "    MyNamespace::function();\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 126
  l: "\n"
  m: ^^
- n: 127
  l: "    Wrapper<int> wrappedValue{10};\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 128
  l: "\n"
  m: ^^
- n: 129
  l: "    variadicFunction(1, 2.5, \"test\");\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 130
  l: "\n"
  m: ^^
- n: 131
  l: "    int sum = lambda(3, 4);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 132
  l: "\n"
  m: ^^
- n: 133
  l: "    auto value = findValue({1, 2, 3}, 2);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 134
  l: "    if (value) {\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 135
  l: "        std::cout << \"Found: \" << *value << \"\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 136
  l: "    }\n"
  m: ^^^^^^^
- n: 137
  l: "\n"
  m: ^^
- n: 138
  l: "    auto variantValue = getVariant(true);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 139
  l: "    if (std::holds_alternative<int>(variantValue)) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 140
  l: "        std::cout << \"Variant holds int: \" << std::get<int>(variantValue) << \"\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 141
  l: "    }\n"
  m: ^^^^^^^
- n: 142
  l: "\n"
  m: ^^
- n: 143
  l: "    auto [x, y, z] = createTuple();\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 144
  l: "\n"
  m: ^^
- n: 145
  l: "    std::pair<int, std::string> pairValue{1, \"one\"};\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 146
  l: "\n"
  m: ^^
- n: 147
  l: "    std::unique_ptr<Example> ptr = std::make_unique<Example>(20);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 148
  l: "\n"
  m: ^^
- n: 149
  l: "    std::vector<int> numbers = {1, 2, 3, 4, 5};\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 150
  l: "    std::sort(numbers.begin(), numbers.end(), std::greater<>());\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 151
  l: "\n"
  m: ^^
- n: 152
  l: "    std::map<std::string, int> myMap;\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 153
  l: "    myMap[\"one\"] = 1;\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 154
  l: "\n"
  m: ^^
- n: 155
  l: "    try {\n"
  m: ^^^^^^^^^^^
- n: 156
  l: "        Example ex4(20);\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 157
  l: "    } catch (const std::exception& e) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 158
  l: "        std::cout << \"Exception: \" << e.what() << \"\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 159
  l: "    }\n"
  m: ^^^^^^^
- n: 160
  l: "\n"
  m: ^^
- n: 161
  l: "    switch (color) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^
- n: 162
  l: "        case Color::Red:\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 163
  l: "            std::cout << \"Red\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 164
  l: "        case Color::Blue:\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 165
  l: "            std::cout << \"Blue\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 166
  l: "        case Color::Green:\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 167
  l: "            std::cout << \"Green\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 168
  l: "        default:\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 169
  l: "            std::cout << \"Default\\n\";\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 170
  l: "    }\n"
  m: ^^^^^^^
- n: 171
  l: "\n"
  m: ^^
- n: 172
  l: "    return 0;\n"
  m: ^^^^^^^^^^^^^^^
- n: 173
  l: "}\n"
  m: "^  "
